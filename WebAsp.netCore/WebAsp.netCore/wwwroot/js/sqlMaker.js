
var currentTable = 'MySQL';

//MySql
const getMySqlTransferFromCheckBox = (item) => {
    switch (item.headers) {
        case "pk": return "PRIMARY KEY ";
        case "nn": return "NOT NULL ";
        case "uq": return "UNIQUE ";
        case "b":  return "BINARY ";
        case "zf": return "(Input Size Number) ZEROFILL ";
        case "ai": return "AUTO_INCREMENT ";
        case "g":  return "GENERATED ALWAYS AS (Input your data on here (ex lastName + firstName)) ";
    }
    return "";
}

//MsSql
const getMsSqlTransferFromCheckBox = (item) => {
    switch (item.headers) {
        case "pk": return "PRIMARY KEY ";
        case "nn": return "NOT NULL ";
        case "uq": return "UNIQUE ";
        case "ai": return "IDENTITY(1,1) ";
    }
    return "";
}

//Oracle
const getOracleTransferFromCheckBox = (item) => {
    switch (item.headers) {
        case "pk": return "PRIMARY KEY ";
        case "nn": return "NOT NULL ";
        case "uq": return "UNIQUE ";
        case "ai": return "GENERATED BY DEFAULT AS IDENTITY ";
    }
    return "";
}

//SQLServer
const getSQLServerTransferFromCheckBox = (item) => {
    switch (item.headers) {
        case "pk": return "PRIMARY KEY ";
        case "nn": return "NOT NULL ";
        case "uq": return "UNIQUE ";
        case "ai": return "IDENTITY(1,1) ";
    }
    return "";
}

const getQueryFromCheckBoxChecked = (item) => {
    switch (getSqlType()) {
        case "MySQL": return getMySqlTransferFromCheckBox(item);
        case "MsSQL": return getMsSqlTransferFromCheckBox(item);
        case "Oracle": return getOracleTransferFromCheckBox(item);
        case "SQLServer": return getSQLServerTransferFromCheckBox(item);
    }
    return "";
}

const getTableRootNode = (element) => {
    return element.parentNode.parentNode.parentNode.parentNode;
}

const getCreateTableSQLCode = (element) => {
    let tableName = getTableRootNode(element).id;
    let tableMaker = document.getElementById(tableName + 'Table').firstElementChild;

    var rowList = [[], [], [], [], [], [], [], [], [], []];
    var result = "CREATE TABLE " + tableName + "(<br>";
 
    for (var i = 1; i < tableMaker.children.length; i++) {
     
        let row = tableMaker.children.item(i);
        result += "&ensp;&emsp;";
      
        for (var j = 0; j < row.children.length; j++) {

            var rowData = row.children.item(j).children.item(0);
            if (rowData.getAttribute("type") == "checkbox") {
                var isChecked = rowData.checked;
                if (isChecked == true) {
                    result += getQueryFromCheckBoxChecked(row.children.item(j));
                }
                rowList[j].push(rowData.checked);
            }
            else if (rowData.getAttribute("type") == "text") {

                if (rowData.value == '') {
                    alert("빈칸을 채워주세요!");
                    return;
                }
                result = result + rowData.value + " ";
                rowList[j].push(rowData.value);
            }
        }
        result += ",<br>";
    } 
    result = result.slice(0, result.length - 5) + "<br>);";
}

const getSelectTableSQLCode = (element) => { alert("Select * From " + getTableRootNode(element).id); + ";" }

const getInsertTableSQLCode = (element) => {}

const tableDisplayChangeAsTableType = (element) => {

    if (element.value == currentTable)
        return; 
    document.getElementById(currentTable + 'Table').style.display = 'none';
    currentTable = element.value;
    document.getElementById(currentTable + 'Table').style.display = 'block';
}


