const getSqlType = () => { return document.getElementById('sqlType').value; }

var currentTable = 'MySQL';

let newMySql =     null; 
let newMsSql =     null; 
let newOracle =    null; 
let newSqlServer = null; 

const init = () => {
    newMySql = document.getElementById('MySQLtableMaker').firstElementChild.lastElementChild.cloneNode(true);
    newMsSql = document.getElementById('MsSQLtableMaker').firstElementChild.lastElementChild.cloneNode(true);
    newOracle = document.getElementById('OracletableMaker').firstElementChild.lastElementChild.cloneNode(true);
    newSqlServer = document.getElementById('SQLServertableMaker').firstElementChild.lastElementChild.cloneNode(true);
}
init();



const newColumnMaker = () => {

    var clone = null;

    switch (getSqlType()) {
        case "MySQL": clone = newMySql; break;
        case "MsSQL": clone = newMsSql; break;
        case "Oracle": clone = newOracle; break;
        case "SQLServer": clone = newSqlServer; break;
    }

    document.getElementById(getSqlType() + 'tableMaker').firstElementChild.appendChild(clone.cloneNode(true));
}

const columnDelete = (element) => { element.parentNode.parentNode.remove(); }

//MySql
const getMySqlQueryCheckBox = (item) => {
    switch (item.headers) {
        case "pk": return "PRIMARY KEY ";
        case "nn": return "NOT NULL ";
        case "uq": return "UNIQUE ";
        case "b":  return "BINARY ";
        case "zf": return "(Input Size Number) ZEROFILL ";
        case "ai": return "AUTO_INCREMENT ";
        case "g":  return "GENERATED ALWAYS AS (Input your data on here (ex lastName + firstName)) ";
    }
    return "";
}

//MsSql
const getMsSqlQueryCheckBox = (item) => {
    switch (item.headers) {
        case "pk": return "PRIMARY KEY ";
        case "nn": return "NOT NULL ";
        case "uq": return "UNIQUE ";
        case "ai": return "IDENTITY(1,1) ";
    }
    return "";
}

//Oracle
const getOracleQueryCheckBox = (item) => {
    switch (item.headers) {
        case "pk": return "PRIMARY KEY ";
        case "nn": return "NOT NULL ";
        case "uq": return "UNIQUE ";
        case "ai": return "GENERATED BY DEFAULT AS IDENTITY ";
    }
    return "";
}

//SQLServer
const getSQLServerQueryCheckBox = (item) => {
    switch (item.headers) {
        case "pk": return "PRIMARY KEY ";
        case "nn": return "NOT NULL ";
        case "uq": return "UNIQUE ";
        case "ai": return "IDENTITY(1,1) ";
    }
    return "";
}


const getQueryFromCheckBoxString = (item) => {


    switch (getSqlType()) {
        case "MySQL": return getMySqlQueryCheckBox(item);
        case "MsSQL": return getMsSqlQueryCheckBox(item);
        case "Oracle": return getOracleQueryCheckBox(item);
        case "SQLServer": return getSQLServerQueryCheckBox(item);
    }
    return "";
}



const tableSqlMaker = () => {

    let tableMaker = document.getElementById(getSqlType() + 'tableMaker').children.item(0);
    let tableName = document.getElementById('tableName').value;
    //ForSave
    var rowList = [[], [], [], [], [], [], [], [], [], []];
    var result = "CREATE TABLE " + tableName + "(<br>";
    var cookieResult = tableName + "=" + currentTable + "/";

    for (var i = 1; i < tableMaker.children.length; i++) {
        let row = tableMaker.children.item(i);
        result += "&ensp;&emsp;";
        for (var j = 0; j < row.children.length; j++) {
            if (row.children.item(j).children.item(0).getAttribute("type") == "checkbox") {
                var isChecked = row.children.item(j).children.item(0).checked;
                if (isChecked == true) {
                    result += getQueryFromCheckBoxString(row.children.item(j));
                }
                cookieResult += isChecked == true? '1' : '0' + "/";
                rowList[j].push(row.children.item(j).children.item(0).checked);

            }
            else if (row.children.item(j).children.item(0).getAttribute("type") == "text") {
                cookieResult += row.children.item(j).children.item(0).value + "/";
                result = result + row.children.item(j).children.item(0).value + " ";
                rowList[j].push(row.children.item(j).children.item(0).value);
            }
        }
        result += ",<br>";
    }
    result = result.slice(0, result.length - 5) + "<br>);";
    document.getElementById("resultSql").innerHTML = result;
    cookieResult += "; path=/;";
    document.cookie = cookieResult;
    getCookie();
    
}

const sqlTypeSelect = (element) => {

    if (element.value == currentTable)
        return; 
    document.getElementById(currentTable + 'Table').style.display = 'none';
    currentTable = element.value;
    document.getElementById(currentTable + 'Table').style.display = 'block';
}

const getTableTypeString = (element) => {
    return element.parentNode.parentNode.children.item(1).firstElementChild.value;
}

const checkBoxClear = (element) => {
    element = element.parentNode.parentNode;
    for (var i = 2; i < element.children.length - 1; i++) {
        element.children.item(i).firstElementChild.checked = false;
    }
}

const columnTypeSelect = (element) => {
    checkBoxClear(element);
    if (element.value != 'VARCHAR()' && element.value != 'DECIMAL()')
        return;
    var idx = element.value.indexOf('(', 0) + 1;
    const input = element.setSelectionRange(idx, idx);
    input.focus();
    
}

const pkCheckboxClick = (element) => {
    if (element.checked == false)
        return;
    element.parentNode.nextElementSibling.firstChild.checked = true;
}

const nnCheckboxClick = (element) => {
    var pkElement = element.parentNode.previousElementSibling.firstChild;
    if (element.checked == false && pkElement.checked == true) {
        pkElement.checked = false;
    }
}

const bCheckboxClick = (element) => {
    if (element.checked == false)
        return;
    element.checked =
        getTableTypeString(element).indexOf("VARCHAR(") == -1
            ? false : true;
}

const unzfCheckboxClick = (element) => {
    
    if (element.checked == false)
        return;

    let dataType = getTableTypeString(element);
    if (dataType.indexOf("INT") == -1 && dataType.indexOf("DECIMAL") == -1) 
        element.checked = false;
    
}

const aiAndgCheckboxClick = (element) => {

    if (element.checked == false) {
        return;
    }
    var parent = element.parentNode;
    if (getTableTypeString(element).indexOf("INT") == -1 && parent.headers == 'ai' && element.checked == true) {
        element.checked = false;
        return;
    }
    else
    {
        (parent.headers == 'ai' ?
            parent.nextElementSibling : parent.previousElementSibling).firstChild.checked = false;
    }
}


